# 스프링 부트가 제공하는 기본 예외 페이지 끄기
server.error.whitelabel.enabled=false

# BasicErrorController 가 제공하는 기본 정보들
# BasicErrorController 컨트롤러는 다음 정보를 model 에 담아서 뷰에 전달한다.
# 뷰 템플릿은 이 값을 활용해서 출력할 수 있다.
#
# 관련 내부 정보들을 고객에게 노출하는 것은 좋지 않다.
# 고객이 해당 정보를 읽어도 혼란만 더해지고, 보안상 문제가 될 수도 있다.
# 그래서 BasicErrorController 오류 컨트롤러에서 다음 오류 정보를 model 에 포함할지 여부 선택할 수 있다.

# server.error.include-exception=false : exception 포함 여부( true , false )
# server.error.include-message=never : message 포함 여부
# server.error.include-stacktrace=never : trace 포함 여부
# server.error.include-binding-errors=never : error 포함 여부

# 기본 값이 never 인 부분은 다음 3가지 옵션을 사용 -> never, always, on_param
# never : 사용하지 않음
# always :항상 사용
# on_param : 파라미터가 있을 때 사용

# on_param 은 파라미터가 있으면 해당 정보를 노출한다.
# 디버그 시 문제를 확인하기 위해 사용할 수 있다.
# 그런데 이 부분도 개발 서버에서 사용할 수 있지만, 운영 서버에서는 권장하지 않는다.
# on_param 으로 설정하고 다음과 같이 HTTP 요청시 파라미터를 전달하면 해당 정보들이 model 에 담겨서 뷰 템플릿에서 출력된다.
# message=&errors=&trace=

# 프링 부트 오류 관련 옵션
# server.error.whitelabel.enabled=true : 오류 처리 화면을 못 찾을 시, 스프링 whitelabel 오류 페이지 적용
# server.error.path=/error : 오류 페이지 경로, 스프링이 자동 등록하는 서블릿 글로벌 오류 페이지 경로와
# BasicErrorController 오류 컨트롤러 경로에 함께 사용된다.
# 확장 포인트
# 에러 공통 처리 컨트롤러의 기능을 변경하고 싶으면 ErrorController 인터페이스를 상속 받아서 구현하거나
# BasicErrorController 상속 받아서 기능을 추가하면 된다.

server.error.include-exception=true
server.error.include-message=on_param
server.error.include-stacktrace=on_param
server.error.include-binding-errors=on_param

# 스프링 부트 기본 오류 처리
# API 예외 처리도 스프링 부트가 제공하는 기본 오류 방식을 사용
# 스프링 부트가 제공하는 BasicErrorController 코드
# /error 동일한 경로를 처리하는 errorHtml() , error() 두 메서드를 확인
# errorHtml() : produces = MediaType.TEXT_HTML_VALUE
# -> 클라이언트 요청의 Accept 해더 값이 text/html 인 경우에는 errorHtml() 을 호출해서 view 를 제공
# error()
# -> 그외 경우에 호출되고 ResponseEntity 로 HTTP Body 에 JSON 데이터를 반환